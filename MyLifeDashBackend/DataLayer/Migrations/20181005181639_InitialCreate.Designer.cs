// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(DashContext))]
    [Migration("20181005181639_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("DataLayer.Entities.CatInstrument", b =>
                {
                    b.Property<int>("CatInstrumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CatInstrumentId");

                    b.ToTable("CatInstruments");

                    b.HasData(
                        new { CatInstrumentId = 1, Name = "Savings" },
                        new { CatInstrumentId = 2, Name = "Equity MX" },
                        new { CatInstrumentId = 3, Name = "Debt MX" },
                        new { CatInstrumentId = 4, Name = "Others MX" },
                        new { CatInstrumentId = 5, Name = "Equity Tech USA" },
                        new { CatInstrumentId = 6, Name = "Equity USA" },
                        new { CatInstrumentId = 7, Name = "Debt USA" }
                    );
                });

            modelBuilder.Entity("DataLayer.Entities.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<float>("Taxes");

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("DataLayer.Entities.ConfigurationInstrument", b =>
                {
                    b.Property<int>("ConfigurationInstrumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CatInstrumentsCatInstrumentId");

                    b.Property<int?>("ConfigurationId");

                    b.Property<float>("Percentaje");

                    b.HasKey("ConfigurationInstrumentId");

                    b.HasIndex("CatInstrumentsCatInstrumentId");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("ConfigurationInstruments");
                });

            modelBuilder.Entity("DataLayer.Entities.HistoricalEntry", b =>
                {
                    b.Property<int>("HistoricalEntryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ConfigurationId");

                    b.Property<DateTime>("Date");

                    b.Property<float>("Gain");

                    b.Property<int?>("SectionId");

                    b.Property<float>("Total");

                    b.HasKey("HistoricalEntryId");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("SectionId");

                    b.ToTable("HistoricalEntries");
                });

            modelBuilder.Entity("DataLayer.Entities.Plugin", b =>
                {
                    b.Property<int>("PluginId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("PluginId");

                    b.ToTable("Plugins");
                });

            modelBuilder.Entity("DataLayer.Entities.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConfigurationRefId");

                    b.Property<string>("Description");

                    b.Property<float>("Gain");

                    b.Property<string>("Name");

                    b.Property<int?>("PluginId");

                    b.Property<float>("Total");

                    b.HasKey("SectionId");

                    b.HasIndex("ConfigurationRefId")
                        .IsUnique();

                    b.HasIndex("PluginId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("DataLayer.Entities.ConfigurationInstrument", b =>
                {
                    b.HasOne("DataLayer.Entities.CatInstrument", "CatInstruments")
                        .WithMany("ConfigurationInstrument")
                        .HasForeignKey("CatInstrumentsCatInstrumentId");

                    b.HasOne("DataLayer.Entities.Configuration", "Configuration")
                        .WithMany("ConfigurationInstruments")
                        .HasForeignKey("ConfigurationId");
                });

            modelBuilder.Entity("DataLayer.Entities.HistoricalEntry", b =>
                {
                    b.HasOne("DataLayer.Entities.Configuration", "Configuration")
                        .WithMany("HistoricalEntries")
                        .HasForeignKey("ConfigurationId");

                    b.HasOne("DataLayer.Entities.Section", "Section")
                        .WithMany("Sections")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("DataLayer.Entities.Section", b =>
                {
                    b.HasOne("DataLayer.Entities.Configuration", "Configuration")
                        .WithOne("Section")
                        .HasForeignKey("DataLayer.Entities.Section", "ConfigurationRefId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.Plugin", "Plugin")
                        .WithMany("Sections")
                        .HasForeignKey("PluginId");
                });
#pragma warning restore 612, 618
        }
    }
}
